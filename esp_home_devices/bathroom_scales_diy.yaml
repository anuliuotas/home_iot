substitutions:
  scales_window_size: "10"
  scales_send_every: "10"
  scales_send_first_at: "10"
  scales_sample_rate: "500ms"
  scales_gain: "32"
  device_name: "bathroom-scales-1"
  device_friendly_name: "Bathroom scales"
  mqqt_root_topic: "device"
  mqqt_retain_message: "false"

ota:
  safe_mode: true
  password: !secret ota_password

esphome:
  name: ${device_name}
  friendly_name: ${device_friendly_name}

esp8266:
  board: esp12e

logger:
  level: DEBUG
  baud_rate: 9600

wifi:
  networks:
  - ssid: !secret wifi_ssid_home
    password: !secret wifi_password_home
  - ssid: !secret wifi_ssid_makerspace
    password: !secret wifi_password_makerspace

captive_portal:

mqtt:
  broker: "192.168.0.200"
  discovery_object_id_generator: device_name
  topic_prefix: ${mqqt_root_topic}/${device_name}
  on_message:
     topic: ${mqqt_root_topic}/${device_name}/gpio/led/set
     qos: 0
     then: 
      - lambda: |-
          if (x == "1") {
            id(onboard_led).turn_off();
          } else {
            id(onboard_led).turn_on();
          }

globals:
  - id: measured_raw_values
    type: float[10]
    restore_value: no
  - id: measured_raw_values_size
    type: int
    restore_value: no
    initial_value: '10'
  - id: filter_measurement_count
    type: int
    restore_value: no
  - id: is_zero_calibrated
    type: bool
    restore_value: no
  - id: zero_calibration_value
    type: float
    restore_value: no
  - id: current_raw_reading_average
    type: float
    restore_value: no
  - id: current_weight
    type: float
    restore_value: no      

script:
  - id: update_current_weight
    then:
      - lambda: !lambda |-
          id(current_weight) = (id(weight_sensor_ch1).raw_state - id(zero_calibration_value)) / 5907;

dallas:
  - pin: GPIO14
    update_interval: 15s

sensor:
  - platform: hx711
    id: weight_sensor_ch1 
    name: "weight_1"
    dout_pin: GPIO0
    clk_pin: GPIO2
    gain: ${scales_gain}
    update_interval: ${scales_sample_rate}
    expire_after: 10s
    accuracy_decimals: 3
    unit_of_measurement: kg
    state_topic: ${mqqt_root_topic}/${device_name}/hx711/weight1/get
    retain: ${mqqt_retain_message}
    filters:
      - lambda: !lambda |-
          // Filter values based on change percentage to exclude measurements when the weight is changing

          int ARRAY_LENGTH = id(measured_raw_values_size);
          
          int i;
          for(i=ARRAY_LENGTH-1; i>=0; --i)
          {
            id(measured_raw_values)[i+1] = id(measured_raw_values)[i];
          }
          id(measured_raw_values)[0]=x;
          if (id(filter_measurement_count) < ARRAY_LENGTH) {
            id(filter_measurement_count) += 1;
          } else {
            float val = 0, sum = 0, mean = 0, min = 9999999, max = -9999999;
            for(i = 0; i < ARRAY_LENGTH; ++i)
            {   
                val = id(measured_raw_values)[i];
                sum += val;
                if (val < min) {
                  min = val;
                }
                if (val > max) {
                  max = val;
                }
            }
            mean = sum / ARRAY_LENGTH;
            id(current_raw_reading_average) = mean;
            if (id(is_zero_calibrated)) {
              id(update_current_weight).execute();
            }

            float percent_diff = (max - min) / mean;

            //ESP_LOGW("TEST", "diff is %f", percent_diff);
            if (abs(percent_diff) > 0.025) {
              return {};
            } 
            return x;
          }
          return {};
      - lambda: !lambda |-
          // Zero calibration
          
          if (!id(is_zero_calibrated)) {
            float mean = id(current_raw_reading_average);
            ESP_LOGW("TEST", "Zero calibrated with value %f", mean);
            id(zero_calibration_value) = mean;
            
            id(is_zero_calibrated) = true;
            
          } else {
            //ESP_LOGW("TEST", "X is %f, zero is %f", x, id(zero_calibration_value));
            float result_val = id(current_weight);
            return result_val;
          }
          return {};

  - platform: adc
    pin: A0
    name: "battery"
    update_interval: 10s
    unit_of_measurement: V
    raw: true
    state_topic: ${mqqt_root_topic}/${device_name}/adc/battery/get
    retain: ${mqqt_retain_message}
    filters:
    - multiply: 0.00458030112923
  
  - platform: dallas
    index: 0
    name: "temp"
    unit_of_measurement: "Â°C"
    state_topic: ${mqqt_root_topic}/${device_name}/ds18b20/temp/get
    retain: ${mqqt_retain_message}


binary_sensor:
  - platform: template
    name: "Turn off watchdog"
    lambda: return (id(current_weight) < 0.5) && (millis() > 2000);
    filters:
      - delayed_on: 20s
    on_press:
      then:
        - logger.log: "Turn off scales"
        - switch.turn_on: done_switch
    state_topic: ${mqqt_root_topic}/${device_name}/gpio/done/get
    retain: ${mqqt_retain_message}
    
  
  - platform: gpio
    pin: GPIO13
    name: "Charging indicator"
    state_topic: ${mqqt_root_topic}/${device_name}/gpio/charging/get
    retain: ${mqqt_retain_message}

switch:
  - platform: gpio
    id: done_switch
    pin: GPIO12
    name: "Turn of switch"
    state_topic: ${mqqt_root_topic}/${device_name}/gpio/kill/get
    retain: ${mqqt_retain_message}

  - platform: gpio
    id: onboard_led
    pin: GPIO3
    name: "Onboard led"
    state_topic: ${mqqt_root_topic}/${device_name}/gpio/led/get
    retain: ${mqqt_retain_message}

i2c:
  sda: GPIO4
  scl: GPIO5

font:
  - file: "fonts/Consolas/CONSOLA.ttf"
    id: text_font
    size: 16
  - file: "fonts/Consolas/CONSOLA.ttf"
    id: weight_font
    size: 38
  - file: "fonts/Consolas/CONSOLA.ttf"
    id: dim_font
    size: 16

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    rotation: 0
    update_interval: 0.5s
    lambda: |-
      if (id(is_zero_calibrated)) {
        float value = id(current_weight);
        if (value < 0) {
          value = 0;
        }
        it.printf(0, 16, id(weight_font), "%5.1f", value);
        it.printf(110, 34, id(dim_font), "kg", value);
      } else {
        it.print(0, 26, id(text_font), "Calibrating...");
      }
      